import asyncio
import logging

import bot_start
from app.other_files import echo, feedback_project
from app.anesthetic_risk.handlers import handler_main_anest
from app.blood_donor.handlers import handler_donor
from app.skf.handlers import handler_main_skf
from app.sofa.handlers import handler_main_sofa

from config import dp, bot, ADMIN_ID

from aiogram.types import BotCommand, BotCommandScopeDefault


async def on_startup():
    await bot.send_message(chat_id=ADMIN_ID, text=f'ü§© –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')


async def on_shutdown():
    await bot.send_message(chat_id=ADMIN_ID, text=f'ü§® –í–Ω–∏–º–∞–Ω–∏–µ, –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞, –æ—Å–≤–æ–±–æ–∂–¥–∞—è —Ä–µ—Å—É—Ä—Å—ã
    await bot.session.close()


async def set_commands():
    """–ö–æ–º–∞–Ω–¥–Ω–æ–µ –º–µ–Ω—é. –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""

    commands = [
        BotCommand(command='/start', description='–°—Ç–∞—Ä—Ç'),
        BotCommand(command='/anesthetic_risk', description='–û—Ü–µ–Ω–∫–∞ –æ–ø–µ—Ä. –∞–Ω–µ—Å—Ç–µ–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∏—Å–∫–∞'),
        BotCommand(command='/skf', description='C–∫–æ—Ä–æ—Å—Ç—å –∫–ª—É–±–æ—á–∫–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏'),
        BotCommand(command='/donor', description='–ü–æ–¥–±–æ—Ä –¥–æ–Ω–æ—Ä–∞ –∫—Ä–æ–≤–∏'),
        BotCommand(command='/sofa', description='–®–∫–∞–ª–∞ SOFA')
    ]

    await bot.set_my_commands(commands, BotCommandScopeDefault())


async def main():
    # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤

    dp.include_routers(

        bot_start.user_router,  # –∫–æ–º–∞–Ω–¥–∞ /start

        feedback_project.user_router,  # callback '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'

        handler_main_anest.anesthesia_router,  # –∫–æ–º–∞–Ω–¥–∞ /anesthetic risk

        handler_main_skf.skf_router,  # –∫–æ–º–∞–Ω–¥–∞ /skf

        handler_donor.donor_router,  # –∫–æ–º–∞–Ω–¥–∞ /donor

        handler_main_sofa.sofa_router,  # –∫–æ–º–∞–Ω–¥–∞ /sofa

        echo.echo_router  # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
    dp.startup.register(on_startup)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞
    dp.shutdown.register(on_shutdown) # Ctrl-C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ –∏ –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

    await set_commands()  # –ö–æ–º–∞–Ω–¥–Ω–æ–µ –º–µ–Ω—é.

    await dp.start_polling(bot)



if __name__ == '__main__':
    # –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –≤—ã–≤–æ–¥–∏—Ç —Ö–æ–¥ –∑–∞–ø—Ä–æ—Å–æ–≤/—Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    logger = logging.getLogger(__name__)
    if True:
        asyncio.run(main())
    elif False:
        print("exit")
